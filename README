- Install Docker and Docker Compose

1. Clone or copy the project folder.
2. Build and run containers:
   docker-compose up --build

3. Access the app at http://localhost:8081

- Database data is persisted in a Docker volume.
- If you want to reset DB data, run:
   docker-compose down -v

- To run out of docker
mvn clean spring-boot:run
Access the app at http://localhost:8080




DROP TABLE IF EXISTS users;

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL
);

INSERT INTO users (name, password) VALUES
('admin', 'admin123');




psql -U postgres


java -jar target/task1-1.0.0.jar



💻 ON SIR’S COMPUTER (in Eclipse)
🧩 Option 1: Eclipse with Embedded Maven (Best)
If Eclipse has Maven integration (most modern Eclipse versions do):

Open Eclipse → File > Import > Existing Maven Projects

Select the unzipped task1/ folder.

IMPORTANT: Set Eclipse to use your custom Maven repo:

Go to:
Window > Preferences > Maven > User Settings

Set User Settings to:
path/to/task1/settings-local.xml

Click Update Settings or Rebuild Project if needed.

✅ Now Eclipse will use your local m2_repo/ instead of downloading anything.


goal


clean package

clean package -o








help:evaluate -Dexpression=user.dir -o





mvn dependency:resolve-plugins -f temp-pom.xml --settings settings-local.xml



Test in Eclipse:
Import the project (File > Import > Existing Maven Projects).
Configure Maven settings as above.
Run clean package via “Run As > Maven Build” with “Offline” checked.
If you added maven-antrun-plugin, test validate to print properties.




To test your `task1` project in Eclipse on the offline machine, ensuring it builds successfully without requiring the missing `maven-help-plugin:3.2.0` artifacts, follow these exact steps. These instructions assume you’ve transferred the `m2_repo/` folder from the online machine to `~/Desktop/dbdas/task1/m2_repo/` on the offline machine, and your `settings-local.xml` is configured for offline mode. I’ll include steps to import the project, configure Maven, run `clean package`, and (if you added `maven-antrun-plugin` to your `pom.xml`) test the `validate` goal to print properties like `user.dir`.

### Exact Steps to Test in Eclipse

#### Step 1: Import the Project
1. **Open Eclipse**:
   - Launch Eclipse on the offline machine.
2. **Import Project**:
   - Go to `File > Import`.
   - Select `Maven > Existing Maven Projects` and click `Next`.
   - In “Root Directory,” click `Browse` and navigate to `~/Desktop/dbdas/task1`.
   - Select the `task1` project (ensure `pom.xml` is checked).
   - Click `Finish`.
   - Eclipse imports the project and resolves dependencies using `m2_repo/`.

#### Step 2: Configure Maven Settings
1. **Open Maven Preferences**:
   - Go to `Window > Preferences` (on macOS, `Eclipse > Preferences`).
   - Navigate to `Maven > User Settings`.
2. **Set User Settings**:
   - In “User Settings,” click `Browse` and select `~/Desktop/dbdas/task1/settings-local.xml`.
   - Verify that “Local Repository” updates to `~/Desktop/dbdas/task1/m2_repo`.
3. **Enable Offline Mode**:
   - Navigate to `Maven` in the Preferences sidebar.
   - Check the box for `Offline` to ensure Eclipse doesn’t attempt online downloads.
4. **Disable Unnecessary Features**:
   - Uncheck:
     - `Download repository index updates on startup`
     - `Download Artifact Sources`
     - `Download Artifact Javadoc`
   - This prevents Eclipse from invoking plugins like `maven-help-plugin`.
5. **Apply Settings**:
   - Click `Apply and Close` to save changes.

#### Step 3: Update Project
1. **Update Maven Project**:
   - In the “Package Explorer,” right-click the `task1` project.
   - Select `Maven > Update Project`.
   - In the dialog:
     - Check `Offline`.
     - Check `Force Update of Snapshots/Releases`.
     - Ensure `task1` is selected.
   - Click `OK`.
   - Eclipse refreshes the project using `m2_repo/`.

#### Step 4: Run `clean package` in Eclipse
1. **Create Run Configuration**:
   - Right-click the `task1` project in “Package Explorer.”
   - Select `Run As > Maven Build...` (with ellipsis).
2. **Configure Maven Build**:
   - In the “Edit Configuration” dialog:
     - **Name**: Enter `task1-clean-package`.
     - **Base directory**: Ensure it’s `~/Desktop/dbdas/task1` (click `Browse Workspace` and select `task1` if needed).
     - **Goals**: Enter `clean package`.
     - **User Settings**: Click `Browse` and select `~/Desktop/dbdas/task1/settings-local.xml`.
     - **Checkboxes**:
       - Check `Offline` to enforce offline mode.
       - Uncheck `Debug Output` and `Skip Tests` unless needed.
3. **Run the Build**:
   - Click `Apply`, then `Run`.
   - The Console view shows Maven output (e.g., `[INFO] Building task1 1.0.0`, `[INFO] BUILD SUCCESS`).
4. **Verify Output**:
   - Check `~/Desktop/dbdas/task1/target/`.
   - Confirm `task1-1.0.0.jar` exists (use `ls -l ~/Desktop/dbdas/task1/target/` in terminal).
   - If the build fails, note the error in the Console (e.g., missing artifacts) and proceed to Step 6.

#### Step 5: Test `validate` with `maven-antrun-plugin` (If Added)
If you modified your `pom.xml` to include `maven-antrun-plugin` (as suggested to print properties like `user.dir` without `maven-help-plugin`), test the `validate` goal:
1. **Create Run Configuration**:
   - Right-click the `task1` project in “Package Explorer.”
   - Select `Run As > Maven Build...`.
2. **Configure Maven Build**:
   - In the “Edit Configuration” dialog:
     - **Name**: Enter `task1-validate`.
     - **Base directory**: Ensure it’s `~/Desktop/dbdas/task1`.
     - **Goals**: Enter `validate`.
     - **User Settings**: Select `~/Desktop/dbdas/task1/settings-local.xml`.
     - **Checkboxes**:
       - Check `Offline`.
       - Uncheck `Debug Output` and `Skip Tests`.
3. **Run the Build**:
   - Click `Apply`, then `Run`.
   - The Console view shows output, including the `maven-antrun-plugin` echo (e.g., `[echo] user.dir: /home/prav/Desktop/dbdas/task1`).
   - Look for `[INFO] BUILD SUCCESS`.
4. **Verify Output**:
   - Confirm the `user.dir` path matches your project directory.
   - If the build fails, note the error (e.g., missing `maven-antrun-plugin:3.1.0` artifacts).

#### Step 6: Debugging Failures
If either `clean package` or `validate` fails in Eclipse:
1. **Check Console Errors**:
   - Look for messages like `Could not resolve dependencies` or `Missing artifact`.
   - Note the specific artifact (e.g., `org.apache.maven.plugins:maven-antrun-plugin:3.1.0`).
2. **Run with Debug Logging**:
   - In the “Run Configurations” for the failing goal, check `Debug Output` and re-run.
   - Alternatively, test in terminal:
     ```bash
     cd ~/Desktop/dbdas/task1
     mvn clean package -o --settings settings-local.xml -X
     ```
     - Or for `validate`:
     ```bash
     mvn validate -o --settings settings-local.xml -X
     ```
   - Save the debug log output.
3. **Check Eclipse Problems**:
   - Go to `Window > Show View > Problems`.
   - Look for `pom.xml` errors (e.g., unresolved dependencies).
4. **Verify Java Version**:
   - Go to `Window > Preferences > Java > Installed JREs`.
   - Ensure JDK 17 is selected and matches your project’s `pom.xml` (`<java.version>17</java.version>`).
   - Right-click `task1` → Properties → Java Build Path → Libraries → Ensure JRE System Library is JDK 17.
5. **Share Errors**:
   - If errors persist, share the Console error or debug log, and I’ll identify missing artifacts or configuration issues.

### Notes
- **Avoiding `maven-help-plugin`**: The steps above ensure Eclipse doesn’t invoke `maven-help-plugin`, eliminating the need for its missing dependencies (e.g., `plexus-component-annotations:1.7.1.jar`, `maven-model:3.6.1.pom`). Your `dependency:tree` confirms all project dependencies are in `m2_repo/`.
- **Maven Antrun Plugin**: If you didn’t add `maven-antrun-plugin`, skip Step 5. If added, `m2_repo/` should already contain its dependencies (e.g., `plexus-utils:3.4.2`) from your online build.
- **Offline Mode**: The `settings-local.xml` with `<offline>true</offline>` and the `file:///` mirror ensures Eclipse uses `m2_repo/` exclusively.
- **Project Integrity**: Since `mvn clean package` succeeded online and `dependency:tree` shows no issues, `m2_repo/` is sufficient for `clean package` unless Eclipse introduces unexpected plugin calls.

### Final Answer
**Exact Steps**:
1. **Import Project**:
   - `File > Import > Maven > Existing Maven Projects`.
   - Select `~/Desktop/dbdas/task1`, click `Finish`.
2. **Configure Maven**:
   - `Window > Preferences > Maven > User Settings`.
   - Set `settings-local.xml`, verify `m2_repo/`, check `Offline`, uncheck index/source downloads, click `Apply and Close`.
3. **Update Project**:
   - Right-click `task1` → `Maven > Update Project`, check `Offline` and `Force Update`, click `OK`.
4. **Run `clean package`**:
   - Right-click `task1` → `Run As > Maven Build...`.
   - Set Name: `task1-clean-package`, Goals: `clean package`, User Settings: `settings-local.xml`, check `Offline`.
   - Click `Apply`, `Run`.
   - Verify `target/task1-1.0.0.jar`.
5. **Run `validate` (if `maven-antrun-plugin` added)**:
   - Right-click `task1` → `Run As > Maven Build...`.
   - Set Name: `task1-validate`, Goals: `validate`, User Settings: `settings-local.xml`, check `Offline`.
   - Click `Apply`, `Run`.
   - Check Console for `user.dir` output (e.g., `/home/prav/Desktop/dbdas/task1`).
6. **Debug Failures**:
   - Check Console/Problems view.
   - Run with `-X` in terminal if needed.
   - Share errors for further assistance.

This ensures your project builds offline in Eclipse without the missing `maven-help-plugin` artifacts. If issues arise, provide the error log, and I’ll guide you further!